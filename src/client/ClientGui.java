/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import java.awt.event.KeyEvent;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

/**
 *
 * @author guillaume
 */
public class ClientGui extends javax.swing.JFrame {

    /**
     * Creates new form ClientGui
     */
    private Client client;
    private String[] storeAnnonces = null;
    private ArrayList<JTextArea> areasInPane = new ArrayList<>();
    
    public ClientGui(Client client) {
        initComponents();
        this.client = client;
        this.updateIsConnected();
        DateFormat fmt = new SimpleDateFormat("dd/MM/yy H:mm:ss");
        this.console.setText("[ " + fmt.format(new Date()) + " ] Client Started.");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        socketStateLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        socketStateInfoLabel = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        createButton = new javax.swing.JButton();
        askDomainButton = new javax.swing.JButton();
        msgText = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        tabbebPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        contactSellerButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        descriptionText = new javax.swing.JTextArea();
        domainComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        listAnnonces = new javax.swing.JList<>();
        createCheckBox = new javax.swing.JCheckBox();
        titleLabel = new javax.swing.JTextField();
        domainComboBox2 = new javax.swing.JComboBox<>();
        ownAncButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        disconnectButton = new javax.swing.JButton();
        updateCheckBox = new javax.swing.JCheckBox();
        priceText = new javax.swing.JTextField();
        deleteButton = new javax.swing.JButton();
        ipText = new javax.swing.JTextField();
        customCommandButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Client GUI");
        setResizable(false);

        socketStateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        socketStateLabel.setText("Socket.isClosed()");
        socketStateLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        socketStateLabel.setPreferredSize(new java.awt.Dimension(150, 35));

        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nameLabel.setText("Name");
        nameLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        nameLabel.setPreferredSize(new java.awt.Dimension(150, 35));
        nameLabel.setRequestFocusEnabled(false);

        socketStateInfoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        socketStateInfoLabel.setText("is_connected");
        socketStateInfoLabel.setPreferredSize(new java.awt.Dimension(150, 35));

        nameText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        nameText.setPreferredSize(new java.awt.Dimension(150, 35));

        connectButton.setText("Connect");
        connectButton.setPreferredSize(new java.awt.Dimension(110, 35));
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        createButton.setText("Create anc");
        createButton.setEnabled(false);
        createButton.setPreferredSize(new java.awt.Dimension(79, 35));
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        askDomainButton.setText("Ask domains");
        askDomainButton.setEnabled(false);
        askDomainButton.setPreferredSize(new java.awt.Dimension(79, 35));
        askDomainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                askDomainButtonActionPerformed(evt);
            }
        });

        msgText.setEnabled(false);
        msgText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                msgTextKeyPressed(evt);
            }
        });

        sendButton.setText("Send");
        sendButton.setEnabled(false);
        sendButton.setPreferredSize(new java.awt.Dimension(110, 35));
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        tabbebPane.setFocusable(false);
        tabbebPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbebPaneStateChanged(evt);
            }
        });

        console.setEditable(false);
        console.setColumns(20);
        console.setRows(5);
        console.setFocusable(false);
        jScrollPane1.setViewportView(console);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 756, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
        );

        tabbebPane.addTab("Console", jPanel1);

        contactSellerButton.setText("Contact seller");
        contactSellerButton.setEnabled(false);
        contactSellerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contactSellerButtonActionPerformed(evt);
            }
        });

        descriptionText.setEditable(false);
        descriptionText.setColumns(20);
        descriptionText.setRows(5);
        descriptionText.setEnabled(false);
        jScrollPane4.setViewportView(descriptionText);

        domainComboBox1.setEnabled(false);
        domainComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                domainComboBox1ActionPerformed(evt);
            }
        });

        listAnnonces.setEnabled(false);
        listAnnonces.setVisibleRowCount(0);
        listAnnonces.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                listAnnoncesMousePressed(evt);
            }
        });
        jScrollPane5.setViewportView(listAnnonces);

        createCheckBox.setText("Create anc");
        createCheckBox.setEnabled(false);
        createCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCheckBoxActionPerformed(evt);
            }
        });

        titleLabel.setEditable(false);
        titleLabel.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        titleLabel.setEnabled(false);
        titleLabel.setPreferredSize(new java.awt.Dimension(150, 35));

        domainComboBox2.setEnabled(false);

        ownAncButton.setText("My anc");
        ownAncButton.setEnabled(false);
        ownAncButton.setPreferredSize(new java.awt.Dimension(79, 35));
        ownAncButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ownAncButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update anc");
        updateButton.setEnabled(false);
        updateButton.setPreferredSize(new java.awt.Dimension(79, 35));
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        disconnectButton.setText("Disconnect");
        disconnectButton.setEnabled(false);
        disconnectButton.setPreferredSize(new java.awt.Dimension(110, 35));
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        updateCheckBox.setText("Update anc");
        updateCheckBox.setEnabled(false);
        updateCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCheckBoxActionPerformed(evt);
            }
        });

        priceText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        deleteButton.setText("Delete anc");
        deleteButton.setEnabled(false);
        deleteButton.setPreferredSize(new java.awt.Dimension(110, 35));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        ipText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ipText.setText("192.168.115.130");
        ipText.setPreferredSize(new java.awt.Dimension(150, 35));

        customCommandButton.setText("Custom commande");
        customCommandButton.setPreferredSize(new java.awt.Dimension(79, 35));
        customCommandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customCommandButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabbebPane)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(createButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(domainComboBox1, 0, 154, Short.MAX_VALUE)
                                    .addComponent(createCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ownAncButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(askDomainButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(updateButton, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                                    .addComponent(updateCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane5)
                                    .addComponent(customCommandButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(socketStateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(socketStateInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ipText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(disconnectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(contactSellerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane4)
                            .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(domainComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(priceText)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(msgText)
                        .addGap(18, 18, 18)
                        .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(disconnectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ipText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(socketStateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(socketStateInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(domainComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(priceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(contactSellerButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(askDomainButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(domainComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ownAncButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(createCheckBox))
                            .addComponent(jScrollPane5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(createButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(customCommandButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(tabbebPane, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(msgText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void askDomainButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
        this.client.requestDomain();
        this.createCheckBox.setEnabled(true);
    }                                               

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        String name = this.nameText.getText();
        if (name == null)
            return;
        if (name.equals("")) {
            this.printConsole("User name shouldn't be empty.");
            return;
        }
        this.client.connect(this.nameText.getText());
    }                                             

    private void ownAncButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        this.client.requestOwnAnnonce();
    }                                            

    private void domainComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {                                                
        @SuppressWarnings("unchecked")
        JComboBox<String> jcb = (JComboBox<String>) evt.getSource();
        String domain = (String) jcb.getSelectedItem();
        if (domainComboBox1.hasFocus())
        	this.client.requestAnnonce(domain);        
    }                                               

    private void createCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {                                               
        JCheckBox jcb = (JCheckBox) evt.getSource();
        if (jcb.isSelected()) {
            this.postAncPerspective();
        } else {
            this.basePerspective();
        }
    }                                              

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        String domain = (String) this.domainComboBox2.getSelectedItem();
        String title = this.titleLabel.getText();
        String descriptif = this.descriptionText.getText();
        String price = this.priceText.getText();
        if (descriptif.contains("\n")) {
            this.printConsole("Invalid descriptif.");
            return;
        }
        if (!price.matches("^[0-9]+\\.?[0-9]{0,2}")) {
            this.printConsole("Non valid price.");
            return;
        }
        this.client.postAnc(domain, title, descriptif, price);
        this.titleLabel.setText("");
        this.descriptionText.setText("");
        this.priceText.setText("");
    }                                            

    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        this.client.disconnect();
        this.nameText.setEnabled(true);
        this.nameText.setEditable(true);
        this.ipText.setEnabled(true);
        this.connectButton.setEnabled(true);
        this.disconnectButton.setEnabled(false);
        this.askDomainButton.setEnabled(false);
        this.domainComboBox1.setEnabled(false);
        this.ownAncButton.setEnabled(false);
        this.createCheckBox.setEnabled(false);
        this.updateButton.setEnabled(false);
        this.createButton.setEnabled(false);
        this.createButton.setEnabled(false);
        this.deleteButton.setEnabled(false);
        this.titleLabel.setEnabled(false);
        this.domainComboBox2.setEnabled(false);
        this.descriptionText.setEnabled(false);
        this.priceText.setEnabled(false);
        this.contactSellerButton.setEnabled(false);
        this.updateIsConnected();
    }                                                

    private void listAnnoncesMousePressed(java.awt.event.MouseEvent evt) {                                          
        if (this.listAnnonces.getModel() == null || this.storeAnnonces == null)
            return;
        int idx = this.listAnnonces.getSelectedIndex();
        this.contactSellerButton.setEnabled(true);
        this.titleLabel.setText(this.storeAnnonces[idx * 5 + 2]);
        this.descriptionText.setText(this.storeAnnonces[idx * 5 + 3]);
        this.priceText.setText(this.storeAnnonces[idx * 5 + 4]);
        this.domainComboBox2.setSelectedItem(this.storeAnnonces[idx * 5 + 1]);
    }                                         

    private void updateCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {                                               
        JCheckBox jcb = (JCheckBox) evt.getSource();
        if (jcb.isSelected()) {
            this.updateDelAncPerspective();
        } else {
            this.basePerspective();
        }
    }                                              

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        int idx = this.listAnnonces.getSelectedIndex();
        if (idx == -1)
            return;
        String id = this.storeAnnonces[idx * 5];
        String domain = (String) this.domainComboBox2.getSelectedItem();
        String title = this.titleLabel.getText();
        String descriptif = this.descriptionText.getText();
        String price = this.priceText.getText();
        if (!price.matches("^[0-9]+\\.?[0-9]{0,2}")) {
            this.printConsole("Prix non valide.");
        } else { 
            this.client.majAnc(id, domain, title, descriptif, price);
            this.titleLabel.setText("");
            this.descriptionText.setText("");
            this.priceText.setText("");
            this.listAnnonces.setModel(new DefaultListModel<>());
            this.client.requestOwnAnnonce();
        }
    }                                            

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        int idx = this.listAnnonces.getSelectedIndex();
        if (idx == -1)
            return;
        String id = this.storeAnnonces[idx * 5];
        this.client.delAnc(id);
        this.listAnnonces.setModel(new DefaultListModel<>());
        this.client.requestOwnAnnonce();
    }                                            

    private void contactSellerButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        int idx = this.listAnnonces.getSelectedIndex();
        if (idx == -1)
            return;
        String id = this.storeAnnonces[idx * 5];
        this.client.requestIP(id);
    }                                                   

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {          
    	if (this.msgText.getText().getBytes().length >= 1024)
    		this.printConsole("Le message à envoyé est trop long (1024 bytes maximum).");
    	else {
	    	try {
			        this.client.sendMessage(this.tabbebPane.getTitleAt(this.tabbebPane.getSelectedIndex()), this.msgText.getText());
			} catch (IOException e) {
			        e.printStackTrace();
			}
	    	this.msgText.setText("");
    	}
    }                                          

    private void tabbebPaneStateChanged(javax.swing.event.ChangeEvent evt) {                                        
        int idx = this.tabbebPane.getSelectedIndex();
        if (idx != 0) {
            this.sendButton.setEnabled(true);
            this.msgText.setEnabled(true);
        }
        else {
            this.sendButton.setEnabled(false);
            this.msgText.setEnabled(false);
            this.msgText.setText("");
        }
    }                                       

    private void customCommandButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        JTextArea textArea = new JTextArea();
        JOptionPane.showMessageDialog(null, new JScrollPane(textArea), "Write custom command.", JOptionPane.QUESTION_MESSAGE);
        try {
            this.client.sendCustomCommand(textArea.getText() + ".");
        } catch (IOException e) {
           e.printStackTrace();
        }
    }                                                   

    private void msgTextKeyPressed(java.awt.event.KeyEvent evt) {                                   
        if (evt.getKeyCode() == KeyEvent.VK_ENTER)
            this.sendButtonActionPerformed(null);
    }                                  

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ClientGui(new Client(1027)).setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(ClientGui.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    // Variables declaration - do not modify                     
    private javax.swing.JButton askDomainButton;
    private javax.swing.JButton connectButton;
    private javax.swing.JTextArea console;
    private javax.swing.JButton contactSellerButton;
    private javax.swing.JButton createButton;
    private javax.swing.JCheckBox createCheckBox;
    private javax.swing.JButton customCommandButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextArea descriptionText;
    private javax.swing.JButton disconnectButton;
    private javax.swing.JComboBox<String> domainComboBox1;
    private javax.swing.JComboBox<String> domainComboBox2;
    private javax.swing.JTextField ipText;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JList<String> listAnnonces;
    private javax.swing.JTextField msgText;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JButton ownAncButton;
    private javax.swing.JTextField priceText;
    private javax.swing.JButton sendButton;
    private javax.swing.JLabel socketStateInfoLabel;
    private javax.swing.JLabel socketStateLabel;
    private javax.swing.JTabbedPane tabbebPane;
    private javax.swing.JTextField titleLabel;
    private javax.swing.JButton updateButton;
    private javax.swing.JCheckBox updateCheckBox;
    // End of variables declaration                   

    public void updateIsConnected() {
        this.socketStateInfoLabel.setText(String.valueOf(this.client.isConnected()));
    }
    
    public void printConsole(String msg) {
        DateFormat fmt = new SimpleDateFormat("dd/MM/yy H:mm:ss");
        this.console.setText(this.console.getText() + "\n" + "[ " + fmt.format(new Date()) + " ] " +  msg);
    }
    /*
    public void updateDomainsPostAnc(String[] domains) {
        this.domainComboBox2.removeAllItems();
        for (String s : domains)
            this.domainComboBox2.addItem(s);
    }
    */
    public void updateDomains(String[] domains) {
        this.domainComboBox1.removeAllItems();
        this.domainComboBox2.removeAllItems();
        for (String s : domains) {
            this.domainComboBox1.addItem(s);
            this.domainComboBox2.addItem(s);
        }
    }
    
    public void updateAnnoncesList(String[] annonces) {
    	//this.listAnnonces.setEnabled(false);
        this.storeAnnonces = annonces;
        DefaultListModel<String> newModel = new DefaultListModel<>();
        if (annonces != null)
            for (int i = 0; i < annonces.length; i += 5)
                newModel.addElement("Annonce " + annonces[i]);
        this.listAnnonces.setModel(newModel);
        //this.listAnnonces.setEnabled(true);
    }
    
    private void postAncPerspective() {
        this.listAnnonces.setModel(new DefaultListModel<>());
        this.listAnnonces.setEnabled(false);
        this.askDomainButton.setEnabled(false);
        this.domainComboBox1.setEnabled(false);
        this.ownAncButton.setEnabled(false);
        this.updateButton.setEnabled(false);
        this.createButton.setEnabled(true);
        this.createCheckBox.setEnabled(true);
        this.updateCheckBox.setEnabled(false);
        this.contactSellerButton.setEnabled(false);
        this.descriptionText.setEditable(true);
        this.titleLabel.setEditable(true);
        this.priceText.setEditable(true);
        this.domainComboBox2.setEnabled(true);
        this.listAnnonces.setEnabled(true);
        this.titleLabel.setText("");
        this.descriptionText.setText("");
        this.priceText.setText("");
    }
    
    public void basePerspective() {
        this.sendButton.setEnabled(false);
        this.nameText.setEnabled(false);
        this.deleteButton.setEnabled(false);
        this.updateButton.setEnabled(false);
        this.connectButton.setEnabled(false);
        this.askDomainButton.setEnabled(true);
        this.domainComboBox1.setEnabled(true);
        this.ownAncButton.setEnabled(true);
        this.descriptionText.setEnabled(true);
        this.priceText.setEnabled(true);
        this.titleLabel.setEnabled(true);
        this.titleLabel.setEditable(false);
        this.priceText.setEditable(false);
        this.createButton.setEnabled(false);
        this.domainComboBox2.setEnabled(false);
        this.listAnnonces.setEnabled(true);
        this.connectButton.setEnabled(false);
        this.disconnectButton.setEnabled(true);
        this.nameText.setEditable(false);
        this.titleLabel.setText("");
        this.descriptionText.setText("");
        this.priceText.setText("");
    }
    
    private void updateDelAncPerspective() {
        this.listAnnonces.clearSelection();
        this.deleteButton.setEnabled(true);
        this.createCheckBox.setEnabled(false);
        this.updateButton.setEnabled(true);
        this.askDomainButton.setEnabled(false);
        this.domainComboBox1.setEnabled(false);
        this.ownAncButton.setEnabled(false);
        this.createButton.setEnabled(false);
        this.contactSellerButton.setEnabled(false);
        this.descriptionText.setEditable(true);
        this.titleLabel.setEditable(true);
        this.priceText.setEditable(true);
        this.domainComboBox2.setEnabled(true);
        this.contactSellerButton.setEnabled(false);
        this.listAnnonces.setEnabled(true);
        this.titleLabel.setText("");
        this.descriptionText.setText("");
        this.priceText.setText("");
    }
    
    public void allowUpdateOwnAnnonce() {
        this.updateCheckBox.setEnabled(true);
    }
    
    public String getIPServeur() {
        return this.ipText.getText();
    }
    
    void addConv(String destinataire) {
        JPanel pan = new JPanel();
        JTextArea conv = new JTextArea();
        JScrollPane jscrol = new javax.swing.JScrollPane();
        
        conv.setName(destinataire);
        this.areasInPane.add(conv);
        conv.setEditable(false);
        conv.setColumns(20);
        conv.setRows(5);
        conv.setFocusable(false);
        jscrol.setViewportView(conv);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(pan);
        pan.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jscrol, javax.swing.GroupLayout.DEFAULT_SIZE, 756, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jscrol, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
        );

        tabbebPane.addTab(destinataire, pan);
        
        this.tabbebPane.addTab(destinataire, pan);
    }
    
    public boolean existsConv(String name) {
    	for (JTextArea jta : this.areasInPane) {
            if (jta.getName().equals(name)) {
                return true;
            }
        }
    	return false;
    }
    
    public void refreshConv(String nameChat, String conv) {
    	for (JTextArea jta : this.areasInPane) {
            if (jta.getName().equals(nameChat)) {
            	jta.setText(conv);
            	return;
            }
        }
    }
    
    // ajout [FROM]
    public void writeTabbedPane(String nameChat, String[] msg) {
        for (JTextArea jta : this.areasInPane) {
            if (jta.getName().equals(nameChat)) {
            	String content = "";
            	for (String m : msg) {
            		jta.setText(jta.getText() + "\n" + msg);
            	}
            	return;
            }
        }
    }
}	